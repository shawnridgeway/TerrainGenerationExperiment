#pragma kernel CSMain

RWStructuredBuffer<float> map;
StructuredBuffer<int> neighbors;
StructuredBuffer<int> randomIndices;
StructuredBuffer<float> brushWeights;

int brushLength;
int maxLifetime;
float inertia;
float sedimentCapacityFactor;
float minSedimentCapacity;
float depositSpeed;
float erodeSpeed;
float evaporateSpeed;
float gravity;
float startSpeed;
float startWater;

// Returns float3(gradientX, gradientY, height)
float3 CalculateHeightAndGradient (int NWNode, int NENode, int SWNode, int SENode, float deltaX, float deltaY) {
    // Calculate heights of the four nodes of the droplet's cell
    float heightNW = map[NWNode];
    float heightNE = map[NENode];
    float heightSW = map[SWNode];
    float heightSE = map[SENode];

    // Calculate droplet's direction of flow with bilinear interpolation of height difference along the edges
    float gradientX = (heightNE - heightNW) * (1 - deltaY) + (heightSE - heightSW) * deltaY;
    float gradientY = (heightSW - heightNW) * (1 - deltaX) + (heightSE - heightNE) * deltaX;

    // Calculate height with bilinear interpolation of the heights of the nodes of the cell
    float height = heightNW * (1 - deltaX) * (1 - deltaY) + 
        heightNE * deltaX * (1 - deltaY) + 
        heightSW * (1 - deltaX) * deltaY + 
        heightSE * deltaX * deltaY;

    return float3(gradientX,gradientY,height);
}

[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    int index = id.x;
    int initialDropIndex = randomIndices[index];
    int NWNode = initialDropIndex;
    int NENode = GetE(NWNode);
    int SWNode = GetS(NWNode);
    int SENode = GetE(GetS(NWNode));
    float deltaX = 0;
    float deltaY = 0;
    float dirX = 0;
    float dirY = 0;
    float speed = startSpeed;
    float water = startWater;
    float sediment = 0;

    for (int lifetime = 0; lifetime < maxLifetime; lifetime ++) {
        float initialDeltaX = deltaX;
        float initialDeltaY = deltaY;

        // Calculate droplet's height and direction of flow with bilinear interpolation of surrounding heights
        float3 heightAndGradient = CalculateHeightAndGradient(NWNode, NENode, SWNode, SENode, deltaX, deltaY);

        // Update the droplet's direction and position (move position 1 unit regardless of speed)
        dirX = (dirX * inertia - heightAndGradient.x * (1 - inertia));
        dirY = (dirY * inertia - heightAndGradient.y * (1 - inertia));
        // Normalize direction
        float len = max(0.01,sqrt(dirX * dirX + dirY * dirY));
        dirX /= len;
        dirY /= len;
        deltaX += dirX;
        deltaY += dirY;

        // Stop simulating droplet if it's not moving or has flowed over edge of map
        if (dirX == 0 && dirY == 0) {
            break;
        }
        
        // Determine corners of current frame
        if (deltaX < 0) {
            NWNode = GetE(NWNode);
            deltaX += 1;
        } else if (deltaX >= 1) {
            NWNode = GetW(NWNode);
            deltaX -= 1;
        }

        if (deltaY < 0) {
            NWNode = GetN(NWNode);
            deltaY += 1;
        } else if (deltaY >= 1) {
            NWNode = GetS(NWNode);
            deltaY -= 1;
        }
        NENode = GetE(NWNode);
        SWNode = GetS(NWNode);
        SENode = GetE(GetS(NWNode));

        // Find the droplet's new height and calculate the deltaHeight
        float newHeight = CalculateHeightAndGradient (NWNode, NENode, SWNode, SENode, deltaX, deltaY).z;
        float deltaHeight = newHeight - heightAndGradient.z;

        // Calculate the droplet's sediment capacity (higher when moving fast down a slope and contains lots of water)
        float sedimentCapacity = max(-deltaHeight * speed * water * sedimentCapacityFactor, minSedimentCapacity);
        
        // If carrying more sediment than capacity, or if flowing uphill:
        if (sediment > sedimentCapacity || deltaHeight > 0) {
            // If moving uphill (deltaHeight > 0) try fill up to the current height, otherwise deposit a fraction of the excess sediment
            float amountToDeposit = (deltaHeight > 0) ? min(deltaHeight, sediment) : (sediment - sedimentCapacity) * depositSpeed;
            sediment -= amountToDeposit;

            // Add the sediment to the four nodes of the current cell using bilinear interpolation
            // Deposition is not distributed over a radius (like erosion) so that it can fill small pits
            map[NWNode] += amountToDeposit * (1 - initialDeltaX) * (1 - initialDeltaY);
            map[NENode] += amountToDeposit * initialDeltaX * (1 - initialDeltaY);
            map[SWNode] += amountToDeposit * (1 - initialDeltaX) * initialDeltaY;
            map[SENode] += amountToDeposit * initialDeltaX * initialDeltaY;
        }
        else {
            // Erode a fraction of the droplet's current carry capacity.
            // Clamp the erosion to the change in height so that it doesn't dig a hole in the terrain behind the droplet
            float amountToErode = min ((sedimentCapacity - sediment) * erodeSpeed, -deltaHeight);
            
            int brushWidth = sqrt(brushLength);
            for (int i = 0; i < brushLength; i++) {
                int brushOffsetX = i % brushWidth - brushWidth / 2;
                int brushOffsetY = i / brushWidth - brushWidth / 2;
                int erodeNode = NWNode;
                while (brushOffsetX != 0) {
                    if (brushOffsetX < 0) {
                        erodeNode = GetE(erodeNode);
                        brushOffsetX += 1;
                    } else if (brushOffsetX >= 1) {
                        erodeNode = GetW(erodeNode);
                        brushOffsetX -= 1;
                    }
                }
                while (brushOffsetY != 0) {
                    if (brushOffsetY < 0) {
                        erodeNode = GetN(erodeNode);
                        brushOffsetY += 1;
                    } else if (brushOffsetY >= 1) {
                        erodeNode = GetS(erodeNode);
                        brushOffsetY -= 1;
                    }
                }

                float weightedErodeAmount = amountToErode * brushWeights[i];
                float deltaSediment = (map[erodeNode] < weightedErodeAmount) ? map[erodeNode] : weightedErodeAmount;
                map[erodeNode] -= deltaSediment;
                sediment += deltaSediment;
            }
        }

        // Update droplet's speed and water content
        speed = sqrt (max(0,speed * speed + deltaHeight * gravity));
        water *= (1 - evaporateSpeed);
    }
}

int GetE(int index) {
  return neighbors[index];
}

int GetN(int index) {
  return neighbors[index + 1];
}

int GetW(int index) {
  return neighbors[index + 2];
}

int GetS(int index) {
  return neighbors[index + 3];
}